name: Deploy to Amazon ECS

on:
  push:
    branches:
      - api-v2-dotnet-conversion

env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: ski-rock-climbing-shop

  # NOTES - you need to create the service first for this to work - this yml doesn't create if it doesn't exist.
  ECS_SERVICE: rock-ski-shop-github-actions-v16
  ECS_CLUSTER: rock-climbing-ski-shop
  ECS_TASK_DEFINITION: .aws/task-definition.json

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    if: ${{ !contains(github.event.head_commit.message, 'Update README.md') }}


    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from GitHub secret variables.
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR with secret variables.
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push the front end image to Amazon ECR.
        id: build-image-front-end
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG_FRONT_END: front-github-actions
        run: |
          cd frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_FRONT_END .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_FRONT_END
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_FRONT_END" >> $GITHUB_OUTPUT

      - name: Build, tag, and push the back end image to Amazon ECR.
        id: build-image-back-end
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG_BACK_END: back-github-actions
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BACK_END .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BACK_END
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BACK_END" >> $GITHUB_OUTPUT

      - name: Build, tag, and push the back end image v2 dotnet image to Amazon ECR.
        id: build-image-back-end-v2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG_BACK_END_v2: back-github-actions-v2
        run: |
          cd backend_v2_dotnet
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BACK_END_v2 .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BACK_END_v2
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BACK_END_v2" >> $GITHUB_OUTPUT

      - name: Deploy Amazon ECS task definition.
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
