# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - docker-aws-ecs

env:
  AWS_REGION: us-west-1                            # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ski-rock-climbing-shop           # set this to your Amazon ECR repository name

  # NOTES - you need to create the service first for this to work - this yml doesn't create if it doesn't exist.
  ECS_SERVICE: rock-ski-shop-github-actions-v16        # set this to your Amazon ECS service name
  ECS_CLUSTER: rock-climbing-ski-shop              # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json   # set this to the path to your Amazon ECS task definition
                                                       # file, e.g. .aws/task-definition.json
  CONTAINER_NAME_FRONT_END: front-end-react-ski-shop-GH           # set this to the name of the container in the
                                                       # containerDefinitions section of your task definition
  CONTAINER_NAME_BACK_END: back-end-react-ski-shop-GH             # set this to the name of the container in the
                                                       # containerDefinitions section of your task definition
  CONTAINER_NAME_BACK_END_v2: back-end-v2-react-ski-shop-GH-dotnet             # set this to the name of the container in the
  # containerDefinitions section of your task definition
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    if: ${{ !contains(github.event.head_commit.message, 'Update README.md') }}


    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from GitHub secret variables.
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR with secret variables.
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push the front end image to Amazon ECR.
        id: build-image-front-end
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG_FRONT_END: front-github-actions
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd frontend # Replace with the actual path to your frontend folder
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_FRONT_END .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_FRONT_END
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_FRONT_END" >> $GITHUB_OUTPUT

      - name: Build, tag, and push the back end image to Amazon ECR.
        id: build-image-back-end
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG_BACK_END: back-github-actions
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd backend # Replace with the actual path to your frontend folder
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BACK_END .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BACK_END
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BACK_END" >> $GITHUB_OUTPUT

      - name: Build, tag, and push the back end image v2 dotnet image to Amazon ECR.
        id: build-image-back-end-v2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG_BACK_END_v2: back-github-actions-v2
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd backend_v2_dotnet # Replace with the actual path to your frontend folder
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BACK_END_v2 .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BACK_END_v2
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BACK_END_v2" >> $GITHUB_OUTPUT

      # comment below out as I think the task definition just uses the tags, not image IDs and tags never change.

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME_FRONT_END }}
      #     image: ${{ steps.build-image-front-end.outputs.image }}

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def2
      #   uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME_BACK_END }}
      #     image: ${{ steps.build-image-back-end.outputs.image }}

      - name: Deploy Amazon ECS task definition.
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          # task-definition: ${{ steps.task-def.outputs.task-definition }}
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
